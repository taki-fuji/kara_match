{"ast":null,"code":"var _jsxFileName = \"/Users/nagasawa/practiceGit/kara_match_app/karaoke_match_app/src/Login.js\";\n//ログイン画面でログインが完了したら、メニューに遷移できるようにしたい\n//https://qiita.com/kouji0705/items/dd22e8982efb5d2a5d85\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"@mui/material\";\nimport { Button } from \"@mui/material\";\n\n// function Login() {\n//   const initialValues = { id: \"\", password: \"\" }; //初期値\n//   const [formValues, setFormValues] = useState(initialValues);\n//   const [formErrors, setFormErrors] = useState({}); //{}←オブジェクト　キーと値を入れる為irerutame\n//   const [isSubmit, setIsSubmit] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target; //分割代入\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   //\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setFormErrors(validate(formValues));\n//     setIsSubmit(true);\n//   };\n\n//   const validate = (values) => {\n//     console.log(values);\n//     const errors = {}; //どの欄でエラーが吐かれているのかパターンを用意しておく\n\n//     if (!values.id) {\n//       errors.id = \"ユーザーIDを入力してください\";\n//     }\n//     if (!values.password) {\n//       errors.password = \"パスワードを入力してください\";\n//     } else if (values.password.length < 4) {\n//       errors.password = \"4文字以上15文字以下のパスワードを入力してください\";\n//     } else if (values.password.length > 15) {\n//       errors.password = \"4文字以上15文字以下のパスワードを入力してください\";\n//     }\n//     return errors;\n//   };\n\n//   return (\n//     <div className=\"formContainer\">\n//       <form onSubmit={(e) => handleSubmit(e)}>\n//         {/* onSubmitプロパティは*/}\n//         <h1>ログインフォーム</h1>\n//         <hr />\n//         {/*横線 */}\n//         <div className=\"uiForm\">\n//           <div className=\"formField\">\n//             <label>ユーザーID</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"ユーザーID\"\n//               name=\"id\"\n//               onChange={(e) => handleChange(e)} //で文字が打ち込まれてる時(onChange)にhandleChangeを呼び出す\n//             />\n//           </div>\n//           <p className=\"errorMsg\">{formErrors.id}</p>\n\n//           <div className=\"formField\">\n//             <label>パスワード</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"パスワード\"\n//               name=\"password\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//           </div>\n//           <p className=\"errorMsg\">{formErrors.password}</p>\n\n//           {/* <button className=\"submitButton\">ログイン</button> */}\n//           {/* <Button\n//           className = \"submitButton\"\n//           components = {Link} to = \"/menu\"\n//           >ログイン</Button> */}\n\n//           <div className=\"new_account\">\n//             <button className=\"newAccountButton\">アカウント新規作成</button>\n//           </div>\n\n//           {Object.keys(formErrors).length === 0 && isSubmit && (\n//             // <div className=\"msgOK\">ログインに成功しました</div\n//             <Link to = \"/menu\" />\n//           )\n//           }\n\n//         </div>\n//       </form>\n\n//     </div>\n//   );\n// }\n\n// export default Login;\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      component: Link,\n      to: \"/menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","Button","Login"],"sources":["/Users/nagasawa/practiceGit/kara_match_app/karaoke_match_app/src/Login.js"],"sourcesContent":["//ログイン画面でログインが完了したら、メニューに遷移できるようにしたい\n//https://qiita.com/kouji0705/items/dd22e8982efb5d2a5d85\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"@mui/material\";\nimport { Button } from \"@mui/material\";\n\n// function Login() {\n//   const initialValues = { id: \"\", password: \"\" }; //初期値\n//   const [formValues, setFormValues] = useState(initialValues);\n//   const [formErrors, setFormErrors] = useState({}); //{}←オブジェクト　キーと値を入れる為irerutame\n//   const [isSubmit, setIsSubmit] = useState(false);\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target; //分割代入\n//     setFormValues({ ...formValues, [name]: value });\n//   };\n\n//   //\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setFormErrors(validate(formValues));\n//     setIsSubmit(true);\n//   };\n\n//   const validate = (values) => {\n//     console.log(values);\n//     const errors = {}; //どの欄でエラーが吐かれているのかパターンを用意しておく\n\n//     if (!values.id) {\n//       errors.id = \"ユーザーIDを入力してください\";\n//     }\n//     if (!values.password) {\n//       errors.password = \"パスワードを入力してください\";\n//     } else if (values.password.length < 4) {\n//       errors.password = \"4文字以上15文字以下のパスワードを入力してください\";\n//     } else if (values.password.length > 15) {\n//       errors.password = \"4文字以上15文字以下のパスワードを入力してください\";\n//     }\n//     return errors;\n//   };\n\n//   return (\n//     <div className=\"formContainer\">\n//       <form onSubmit={(e) => handleSubmit(e)}>\n//         {/* onSubmitプロパティは*/}\n//         <h1>ログインフォーム</h1>\n//         <hr />\n//         {/*横線 */}\n//         <div className=\"uiForm\">\n//           <div className=\"formField\">\n//             <label>ユーザーID</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"ユーザーID\"\n//               name=\"id\"\n//               onChange={(e) => handleChange(e)} //で文字が打ち込まれてる時(onChange)にhandleChangeを呼び出す\n//             />\n//           </div>\n//           <p className=\"errorMsg\">{formErrors.id}</p>\n\n//           <div className=\"formField\">\n//             <label>パスワード</label>\n//             <input\n//               type=\"text\"\n//               placeholder=\"パスワード\"\n//               name=\"password\"\n//               onChange={(e) => handleChange(e)}\n//             />\n//           </div>\n//           <p className=\"errorMsg\">{formErrors.password}</p>\n\n//           {/* <button className=\"submitButton\">ログイン</button> */}\n//           {/* <Button\n//           className = \"submitButton\"\n//           components = {Link} to = \"/menu\"\n//           >ログイン</Button> */}\n\n//           <div className=\"new_account\">\n//             <button className=\"newAccountButton\">アカウント新規作成</button>\n//           </div>\n\n//           {Object.keys(formErrors).length === 0 && isSubmit && (\n//             // <div className=\"msgOK\">ログインに成功しました</div\n//             <Link to = \"/menu\" />\n//           )\n//           }\n        \n//         </div>\n//       </form>\n   \n//     </div>\n//   );\n// }\n\n// export default Login;\nconst Login =()=>{\n  return(\n    <>\n    <Button\n    component = {Link} to = \"/menu\"\n    ></Button>\n    </>\n  )\n}\n"],"mappings":";AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,SAASC,IAAI,QAAQ,eAAe;AACpC,SAASC,MAAM,QAAQ,eAAe;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AACA,MAAMC,KAAK,GAAE,MAAI;EACf,oBACE;IAAA,uBACA,QAAC,MAAM;MACP,SAAS,EAAIF,IAAK;MAAC,EAAE,EAAG;IAAO;MAAA;MAAA;MAAA;IAAA;EACrB,iBACP;AAEP,CAAC;AAAA,KARKE,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}